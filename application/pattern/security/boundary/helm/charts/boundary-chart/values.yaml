# Default values for boundary-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

initialiseBoundary:
  # Whether to create boundary-init container to run database migration
  # This is useful when it's required to avoid running database migration on pod restart
  # Post upgrade re-deploy with `false`
  enabled: true

image:
  repository: hashicorp/boundary
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.15.3"

imagePullSecrets: []
nameOverride: "boundary"
fullnameOverride: "boundary"

publicAddress: 192.168.1.1
publicPort: 30202

database:
  url: postgresql.postgresql.svc.cluster.local
  port: 5432
  dbName: boundary
  ssl: false
  username: postgres
  password: postgres

aead:
  enabled: true
  keys:
    root: D0vmvzf8l+C709nVfEH3hgBCj6IF/1eb9kCTYTtnDVc=
    recovery: Ivj8Si8UQBp+Zm2lLbUDTxOGikE8rSo6QihCjWSTXqY=
    worker-auth: 8Aj2j2JpFmY1WdjKcmETyYwUi7njP74MLVXWNov4rZ8=

gcpckms:
  enabled: false
  # gcpckms Documented Here:
  # https://developer.hashicorp.com/boundary/docs/configuration/kms/gcpckms
  purpose: root
  credentials: /usr/boundary/boundary-project-user-creds.json
  project: boundary-project
  region: global
  key_ring: boundary-keyring
  crypto_key: boundary-key

events:
  # Specifies whether to enable events stanza
  enabled: false

  # Select whether or not to enable audit events
  audit: false
  # Select whether or not to enable observations events
  observations: false
  # Select whether or not to enable sysevents
  sysevents: false

  # Specifies sink configs
  sink: {}
    # - name: "audit"
    #   # specifies the type of sink. Can be stderr or file
    #   type: "stderr"
    #   description: "audit stderr sink"
    #   event_types: "[\"audit\"]"
    #   # For audit events only cloudevents-json seem to work
    #   format: "cloudevents-json"
    #   # specifies a set of predicates for including an event in the sink. If any filter matches, the event will be included.
    #   # it works as OR condition
    #   allow_filters:
    #     - "\"/data/request_info/path\" contains \":authenticate\""
    #     - "\"/data/request_info/path\" contains \":authorize-session\""
    #   # audit_config parameters only required for audit events
    #   audit_filter_overrides:
    #     # Specifies the filter operation to apply to fields that are classified as secret e.g "encrypt", "hmac-sha256", "redact"
    #     secret: "redact"
    #     # Specifies the filter operation to apply to fields that are classified as sensitive e.g "encrypt", "hmac-sha256", "redact"
    #     sensitive: "redact"
    # - name: "audit"
    #   type: "stderr"
    #   description: "audit stderr sink"
    #   event_types: "[\"audit\"]"
    #   format: "cloudevents-json"
    #   file:
    #     file_name: "audit.log"
    #     path: "/boundary/event_logs"
    #     rotate_duration: "24h"
    #     rotate_max_files: 5
    #     rotate_bytes: 25165824

vault:
  enabled: false
  # Use form `protocol://fqdn:port`
  fqdn: https://vault.home.lan:443
  mountPath: local-kms
  tlsSkipVerify: true
  # Select whether or not to mount in an externally-created token for management of Vault
  managementToken:
    enabled: true
    envName: VAULT_TOKEN
    secretName: vault-secret
  # Pull DB credentials from Vault
  database:
    enabled: true
    # admin creds
    vaultAdminCredPath: postgres/static-creds/boundary-db
    # boundary creds
    vaultCredPath: postgres/creds/boundary-db
    vaultDbRole: boundary

# set true to enable prometheus metrics
metrics:
  enabled: false
  name: metrics
  port: 9203
  path: /metrics

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecrets:
  - secretName: vault-secret
    keyName: VAULT_TOKEN

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  - type: ClusterIP
    ports:
      - name: api
        number: 9200
      - name: cluster
        number: 9201
  - type: NodePort
    # Annotations to add to the service of type LoadBalancer
    annotations: {}
    # IP whitelisting for service of type LoadBalancer
    loadBalancerSourceRanges: []
    ports:
      - name: data
        number: 9202

ingress:
  enabled: true
  className: public
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: boundary.home.lan
      paths:
        - path: /
          pathType: ImplementationSpecific
          port: api
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

volumes: null
  # - name: event-logs
  #   emptyDir: {}

volumeMounts: null
  # - mountPath: /boundary/event_logs
  #   name: event-logs

extraContainers: null
  # - name: sidecar
  #   image: "sidecar"
  #   command: [sh, -c]
  #   args:
  #     - line1 &&
  #       line2 
  #   volumeMounts:
  #     - name: plugins
  #       mountPath: /path/to/plugin

nodeSelector: {}

tolerations: []

affinity: {}

extraLabels: {}
